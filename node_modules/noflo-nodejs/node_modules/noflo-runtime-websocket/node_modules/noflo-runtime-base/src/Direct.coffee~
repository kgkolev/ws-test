
class Runtime extends Base
  constructor: () ->
    super()
    @clients = []

  _connect: (client) ->
    @clients.push client
    client.on 'send', (msg) ->
      # Capture context
      @receive msg, { client: client }

  _disconnect: (client) ->
    return if (@clients.indexOf(client) == -1)
    @clients.splice @clients.indexOf(client), 1
    client.removeAllListeners 'send' # XXX: a bit heavy

  _receive: (msg, context) ->
    # Forward to Base
    @receive msg.protocol, msg.command

  send: (protocol, topic, payload, context) ->
    return if not context.client
    m =
      protocol: protocol
      command: topic
      payload: payload
    context.client._receive m

  sendAll: (protocol, topic, payload) ->
    m =
      protocol: protocol
      command: topic
      payload: payload
    for client in @clients
      client._receive m
    
# Mostly used for testing
class Client extends EventEmitter
  constructor: (runtime) ->
    super()
    @runtime = runtime

  connect: () ->
    @runtime._connect client

  disconnect: () ->
    @runtime._disconnect client

  send: (protocol, topic, payload) ->
    m =
      protocol: protocol
      command: topic
      payload: payload
    @emit 'send', m

  _receive: (message) ->
    @emit 'message', message
